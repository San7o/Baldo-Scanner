#include "daemon/malware_db.hpp"
#include "common/logger.hpp"

#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <filesystem>

#include <curlpp/cURLpp.hpp>
#include <curlpp/Options.hpp>

using namespace AV;

MalwareDB::MalwareDB(std::string filename)
{
    int rc = sqlite3_open(filename.c_str(), &this->connection);
    if (rc)
    {
        Logger::Log(Enums::LogLevel::ERROR, "Can't open database: " + std::string(sqlite3_errmsg(connection)));
        sqlite3_close(connection);
    }
}

MalwareDB::~MalwareDB()
{
    sqlite3_close(this->connection);
}

int MalwareDB::fetch()
{
    // Malware signatures database
    Logger::Log(Enums::LogLevel::INFO, "Fetching malware signatures database");
    std::cout << std::flush;
    
    std::ofstream out("/tmp/signatures-latest.csv", std::ios::trunc);
    out << curlpp::options::Url("https://bazaar.abuse.ch/export/csv/recent");

    Logger::Log(Enums::LogLevel::INFO, "Fetched database to /tmp/signatures-latest.csv");
    out.close();

    // Yara rules
    Logger::Log(Enums::LogLevel::INFO, "Fetching yara-rules");
    std::ofstream out2("/tmp/yara-rules.zip", std::ios::trunc);
    out2 << curlpp::options::Url("https://yaraify.abuse.ch/yarahub/yaraify-rules.zip");
    out2.close();

    if (std::filesystem::exists("/etc/antivirus/yara-rules"))
    {
        std::filesystem::remove_all("/etc/antivirus/yara-rules");
    }
    if (std::system("unzip /tmp/yara-rules -d /etc/antivirus/yara-rules/") == -1)
    {
        Logger::Log(Enums::LogLevel::ERROR, "Failed to fetch yara-rules");
        return -1;
    }
    Logger::Log(Enums::LogLevel::INFO, "Fetched yara-rules to /etc/antivirus/yara-rules");
    return 0;
}

int MalwareDB::load(std::string path)
{
    Logger::Log(Enums::LogLevel::INFO, "Loading malware signatures database");
    char* errMsg = nullptr;

    if (this->connection == nullptr)
    {
        Logger::Log(Enums::LogLevel::ERROR, "Database not connected yet");
        return -1;
    }

    std::string createTableSQL = "CREATE TABLE IF NOT EXISTS signatures("
        "id INTEGER PRIMARY KEY, column1 TEXT, column2 TEXT, "
        "column3 TEXT, column4 TEXT, column5 TEXT, column6 TEXT, "
        "column7 TEXT, column8 TEXT, column9 TEXT, column10 TEXT, "
        "column11 TEXT, column12 TEXT, column13 TEXT, column14 TEXT);";

    int rc = sqlite3_exec(connection, createTableSQL.c_str(), nullptr, nullptr, &errMsg);
    if (rc != SQLITE_OK)
    {
        Logger::Log(Enums::LogLevel::ERROR,
                        "Failed to create table: " + std::string(errMsg));
        sqlite3_free(errMsg);
        sqlite3_close(connection);
        return -1;
    }

    std::ifstream csvFile(path);
    std::string line;
    std::string insertSQL = "INSERT INTO signatures (column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, column11, column12, column13, column14 ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);";
    sqlite3_stmt* stmt;

    rc = sqlite3_prepare_v2(connection, insertSQL.c_str(), -1, &stmt, nullptr);
    if (rc != SQLITE_OK)
    {
        Logger::Log(Enums::LogLevel::ERROR,
                    "Failed to prepare statement: " + std::string(sqlite3_errmsg(connection)));
        sqlite3_close(connection);
        return -1;
    }

    sqlite3_exec(connection, "BEGIN TRANSACTION;", nullptr, nullptr, nullptr);
    
    while (std::getline(csvFile, line)) {


        std::istringstream ss(line);
        
        for (int i = 0; i < 14; i++)
        {
            std::string col;
            std::getline(ss, col, ',');
            sqlite3_bind_text(stmt, i + 1, col.c_str(), -1, SQLITE_TRANSIENT);
        } 

        rc = sqlite3_step(stmt);
        if (rc != SQLITE_DONE) {
            std::cerr << "SQL error: " << sqlite3_errmsg(connection) << std::endl;
        }
        sqlite3_reset(stmt);
    }

    sqlite3_exec(connection, "END TRANSACTION;", nullptr, nullptr, nullptr);
    
    Logger::Log(Enums::LogLevel::INFO, "Loaded malware signatures database");

    sqlite3_finalize(stmt);
    return 0;
}

int MalwareDB::update() 
{
   if (fetch() < 0) {
       return -1;
   }
   if (load("/tmp/signatures-latest.csv") < 0) {
       return -1;
   }
   return 0;
}
